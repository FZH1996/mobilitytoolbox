classdef MobilityNetwork
    % NETWORK Class -  Exposes network related methods for others classes
    %   Developed by: Igor Amorim Silva
    %   Version: 0.0.1
    %   License: MIT
    %   Date: 2017-06-23
    %
    %
    properties (Access = private)
    POWER_TX_WATTS; %Transmitting Power of eNB (watts)
    POWER_TX_WATTS_FEMTO; %Transmitting Power of HeNB (watts)
    %Considering Load 100%
    %Potnscw = TPower/sub_carriers {potnscw=Potenciadtransmisao/subcarriers}
    NUMBER_SUBCARRIERS; % N sub_carries- 1RB= 12 sub_carries {num de subportadoras -> 1 RB = 12 subportadoras}
    %Power of enB {Potencia/subportadora}
    POWER_ENB_WATTS; %W 
    POWER_ENB_DBM; %dBm 
    %Power of HenB
    POWER_HENB_FEMTO_WATTS; %W
    POWER_HENB_FEMTO_DBM; %dBm
    end
    
    properties
    TYPE = 'OO'; % type of communication 
    CITY_SIZE = 'M'; %Size of city- Medium
    OPERATIONAL_FREQUENCY = 2000; %Operational frequency 2Ghz
    HEIGHT_BS = 30; %height of BS
    HEIGHT_MS = 1.5; %height of MS
    WALL_WINDOW_LOSS = 10; %Wall/Window loss
    %Pathloss- Parameters of femto
    TYPE_OF_BUILDING = 'R'; %type of building 
    OP_FREQUENCY = 2000; %Operational frequency 2000Mhz
    NUMBER_OF_FLOORS_BUILDING = 1;
    %Parameters of eNB
    RESOURCE_BLOCK = 25;%5mhz-25;resource block 
    POWER_TX_ENB_DBM = 43;%27/46; dBm Transmitting Power of eNB
    GAIN_TX = 12; %16dBi Antenna Gain
    CABLELOSS = 3; %dB Cable Loss
    NOISE = 0; %w noise
    
    %Parameters of HenB
    POWER_TX_FEMTO =20; %15/23;dBm Transmitting Power of HeNB
    GAIN_TX_FEMTO=2; %2%dBi Antenna Gain
    BW = 25; % Bandwidth, number of RBs => 5 MHz = 25 PRBs  %20Mhz-100RBs
    NOISE_FEMTO = 0; %w Noise
    
    
    end
   
    methods
        
        function POWER_HENB_DBM_WATTS = getPowerHenbFemtoWatts(obj)
            % Doc Soon
            pew = obj.getPowerTxWatts();
            nsc = obj.getNumberSubcarriers();
            POWER_HENB_DBM_WATTS = pew / nsc;
        end
        
        function setPowerHenbFemtoWatts(obj , POWER_TX_WATTS , NUMBER_SUBCARRIERS)
            % Doc Soon
            obj.POWER_HENB_FEMTO_WATTS = POWER_TX_WATTS/NUMBER_SUBCARRIERS;
        end
        
        function POWER_HENB_FEMTO_DBM = getPowerHenbFemtoDbm(obj) 
            % Doc Soon
            phwf = obj.getPowerHenbFemtoWatts();
            POWER_HENB_FEMTO_DBM = 10*log10(phwf) + 30;
        end
             
        function setPowerHenbFemtoDbm(obj, POWER_HENB_FEMTO_WATTS) 
            % Doc Soon
            obj.POWER_HENB_FEMTO_DBM = 10*log10(POWER_HENB_FEMTO_WATTS) + 30;
        end
        
        function POWER_ENB_DBM = getPowerEnbDbm(obj)
            % Doc Soon
            pew = obj.getPowerEnbWatts();
            POWER_ENB_DBM = 10*log10(pew) + 30;
        end
        
        function setPowerEnbDbm(obj , POWER_ENB_WATTS)
            % Doc Soon
            obj.POWER_ENB_DBM = 10*log10(POWER_ENB_WATTS) + 30;
        end
        
        function POWER_ENB_WATTS = getPowerEnbWatts(obj)
           % Doc Soon
            nsb = obj.getNumberSubcarriers();
           ptxw = obj.getPowerTxWatts();
           POWER_ENB_WATTS = ptxw / nsb ; 
        end
        
        function setPowerEnbWatts(obj, NUMBER_SUBCARRIERS, POWER_TX_WATTS )
           % Doc Soon
           obj.POWER_ENB_WATTS = POWER_TX_WATTS / NUMBER_SUBCARRIERS ; 
        end
        
        function NUMBER_SUBCARRIERS = getNumberSubcarriers(obj)
           % Doc Soon
            NUMBER_SUBCARRIERS = obj.BW*12; 
        end
        
        function setNumberSubcarriers(obj , BW)
            % Doc Soon
           obj.NUMBER_SUBCARRIERS = BW*12; 
        end
        
        function POWER_TX_WATTS_FEMTO = getPowerTxWattsFemto(obj)
            % Doc Soon
            POWER_TX_WATTS_FEMTO = (1*10^(obj.POWER_TX_FEMTO/10))/1000;
        end
        
        function setPowerTxWattsFemto(obj, POWER_TX_FEMTO)
            % Doc Soon
            obj.POWER_TX_WATTS_FEMTO = (1*10^(POWER_TX_FEMTO/10))/1000;
        end
        
        function POWER_TX_WATTS = getPowerTxWatts(obj)
            % Doc Soon
            POWER_TX_WATTS  = (1*10^(obj.POWER_TX_ENB_DBM/10))/1000; 
        end
        
        function setPowerTxWatts(obj, POWER_TX_ENB_DBM)
            % Doc Soon
            obj.POWER_TX_WATTS  = (1*10^(POWER_TX_ENB_DBM/10))/1000; 
        end
        
        function [RSRP_femto, RSRP_femto_w, dists_femtos, loss_femtos] = rsrpFemtos( obj, data , femtos ) 
        %   rsrpFemtos - Function to calculate rsrp of femtocell 'HENB' from data generated by class MobilityGenerator 
        %
        %   Input : 
        %   * data => Struct with model configuration data. See documentation for more info
        %   * femtos => Array [n , 2] containing x and y of femto cells
        %
        %   Ouptut :
        %   * RSRP_femto    => Calculated RSRP in DB
        %   * RSRP_femto_w  => Calculated RSRP in Watts
        %   * dists_femtos  => Distance from each user to each femtocell 
        %   * loss_femtos   => Calculated signal power loss User to femtocell
        %   
        %   Example : 
        %   [RSRP_femto, RSRP_femto_w, dists_femtos, loss_femtos] = [class constructor].rsrpFemtos( data , femtos )
        %   
        %
        %   Note: Case not config data is given, the function uses default
        %         values
        % 
        [RSRP_femto, RSRP_femto_w, dists_femtos, loss_femtos] = rsrp_femtosHelper(data,femtos, obj);
       
        end
        
        function channel_capacity = channelCapacityAfterHandover(~, SINR_femto_macro_w , out_handover_sinr_OP)
           % Function Throughput
            % Description: Function to calculate the throughput
            % In the Shannon-Hartley theorem for channel capacity 
            % C = B log2(1+S/N) bits/sec
            % 
            % C is the channel capacity in bits per second
            % B is the bandwidth of the channel in hertz 
            % S/N is the signal-to-noise ratio (SNR)
            channel_capacity = channelCapacityHelper(SINR_femto_macro_w , out_handover_sinr_OP);
        end
        
        function [RSRP_macro_w, RSRP_macro, dists_macro, loss_macro] = rsrpMacros(obj,data,macro)
        %   rsrpMacros - Function to calculate rsrp of macrocell 'ENB' from data generated by class MobilityGenerator 
        %
        %   Input : 
        %   * data => Struct with model configuration data. See documentation for more info
        %   * femtos => Array [n , 2] containing x and y of macro cells
        %
        %   Ouptut :
        %   * RSRP_macro    => Calculated RSRP in DB
        %   * RSRP_macro_w  => Calculated RSRP in Watts
        %   * dists_macros  => Distance from each user to each macrocell 
        %   * loss_macros   => Calculated signal power loss User to macrocell
        %   
        %   Example : 
        %   [RSRP_macro, RSRP_macro_w, dists_femtos, loss_macro] = [class constructor].rsrpMacros( data , macros )
        %   
        %
        %   Note: Case not config data is given, the function uses default
        %         values
        %     
        [RSRP_macro_w, RSRP_macro, dists_macro, loss_macro] = rsrp_macroHelper(data,macro, obj);
        end
        
        function [SINR_femto_macro_w,SINR_femto_macro] = sinr(obj , RSRP_femto_macro_w , Prxtotal)
        % SINR: Signal-to-Interference-plus-Noise Ratio
        % SINR = RSRP/I+N,  servingPower / (average interference power+ noise) where
        % interferencePower = Prxtotal= Totalpower- TpowerX
        % Description: Function to calculate the SINR of given data
        %
        if(nargin > 1)
         [SINR_femto_macro_w,SINR_femto_macro] = sinrHelper(RSRP_femto_macro_w, Prxtotal, obj);
        else
            [Prxtotal, ~] = rssi(obj, RSRP_femto_macro_w);
            [SINR_femto_macro_w,SINR_femto_macro] = sinrHelper(RSRP_femto_macro_w, Prxtotal, obj);
        end
        
        end
        
        function [Prxtotal, RSSI_femto_macro_w] = rssi(obj, RSRP_femto_macro_w)
            % RSSI (Received Signal Strength Indicator) 
            % Description: a parameter which provides information about total received wide-band power 
            % (measure in all symbols) including all interference and thermal noise.
            %
            % RSSI = wideband power = noise + serving cell power + interference power
            % 
            % --- Input 
            % RSRP_femto_macro_w => Concatenated RSRP of femtocells and macrocells in(watts)
            % 
            % --- Output
            % Prxtotal => Sum of total RSRP of each macro and femto + noise
            % RSSI_femto_macro_w => Concatenated RSSI of femtocells and macrocells in(watts)
            % 
            %
            % --- Example
            %  [Prxtotal, RSSI_femto, RSSI_macro] = rssi( RSRP_femto_macro_w)
            % 
         [Prxtotal, RSSI_femto_macro_w] = rssiHelper(RSRP_femto_macro_w, obj);
        end
           
        function [RSRQ_femto_macro_w,RSRQ_femto_macro] = rsrq(obj , RSRP_femto_macro_w , RSSI_femto_macro_w)
        % RSRQ:Reference Signal Received Quality|
        % Description: Function to calculate the RSRQ
        % RSRQ= (N*RSRP)/RSSI where N= Number of RBs
        %
        % 
        % --- Input 
        % RSRP_macro_w => RSRP of macrocells (watts)
        % RSSI_macro=> RSSI of macrocells (watts)
        % RSRP_femto_w => RSRP of femtocells (dbm)
        % RSSI_femto => RSSI of femtocells (watts)
        % N => number of resource blocks (Defined in config.m)
        %
        % --- Output
        % RSRQ_femto_macro_w => RSRQ of femtocells and macrocells in (watts)
        % RSRQ_femto_macro => RSRQ of femtocells and macrocells in (dB)
        % 
        % Example:
        % [RSRQ_femto_w, RSRQ_femto, RSRQ_macro_w,RSRQ_macro] = rsrq(RSRP_macro_w,RSRP_femto_w,RSSI_femto,RSSI_macro, N)
        [RSRQ_femto_macro_w,RSRQ_femto_macro] = rsrqHelper(RSRP_femto_macro_w , RSSI_femto_macro_w, obj);       
        end        
        
        
        
        
        end
    
end

